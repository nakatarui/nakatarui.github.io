[{"content":"Googleが提供するブログサービス「Blogger」でブログを書き始めました。\n新たにサイトを解説した理由は主に2つあります。\n1つは、「もっとカジュアルな雑記や、サイト運営に関する進捗を記録したい」という目的のためです。\nこのサイトはit関連メインでやっていきたいと考えています。\nサイトのジャンルの混同を防ぐためにも必要だと思いました。\n2つめは、ウェブサイト運営のモチベーションアップのためです。\n最近、gsc/gaの設定がうまくいかず、すこしモチベーションが低下していました。\nそこで、Google提供のBloggerならそこらへんで困難することは少ないだろうと見込んで、数あるブログサービスの中からBloggerを選びました。 また、スマホからも投稿できるのも良いです。pcを起動しなくとも、手軽に記事を作れます。\n以上Bloggerを始めた理由でした。\nちなみに、サイトurlは以下になります。 https://nakataruib.blogspot.jp\n個人的な話ばかりですが、よければぜひお越しください。\n","permalink":"http://localhost:41443/posts/blogger/","summary":"\u003cp\u003eGoogleが提供するブログサービス「Blogger」でブログを書き始めました。\u003cbr\u003e\n新たにサイトを解説した理由は主に2つあります。\u003cbr\u003e\n1つは、「もっとカジュアルな雑記や、サイト運営に関する進捗を記録したい」という目的のためです。\u003cbr\u003e\nこのサイトはit関連メインでやっていきたいと考えています。\u003cbr\u003e\nサイトのジャンルの混同を防ぐためにも必要だと思いました。\u003cbr\u003e\n2つめは、ウェブサイト運営のモチベーションアップのためです。\u003cbr\u003e\n最近、gsc/gaの設定がうまくいかず、すこしモチベーションが低下していました。\u003cbr\u003e\nそこで、Google提供のBloggerならそこらへんで困難することは少ないだろうと見込んで、数あるブログサービスの中からBloggerを選びました。\nまた、スマホからも投稿できるのも良いです。pcを起動しなくとも、手軽に記事を作れます。\u003c/p\u003e\n\u003cp\u003e以上Bloggerを始めた理由でした。\u003cbr\u003e\nちなみに、サイトurlは以下になります。\n\u003ca href=\"https://nakataruib.blogspot.jp\"\u003ehttps://nakataruib.blogspot.jp\u003c/a\u003e\u003cbr\u003e\n個人的な話ばかりですが、よければぜひお越しください。\u003c/p\u003e","title":"「Blogger」でブログを始めました"},{"content":"DNSを変更する Linux では/etc/resolv.confファイルを使ってDNS の設定をします。\n/etc/resolv.confはテキストファイルで、下の書式の通りに記述することで設定します。\nnameserver DNSのipアドレス 例えば、DNSをGoogleの8.8.8.8に設定したいときはこう記述します。\nnameserver 8.8.8.8 簡単ですね。\nまた、複数のDNSを設定することもできます。\n複数設定することで、普段使っているDNSが使えなくなっても2番目、3番目のDNSへの接続をしてくれます。\nファイルの上から順にそのDNSの優先順位が変わります。\nnameserver 0.0.0.1 # 一番優先順位の高いDNS(普段つかう) nameserver 0.0.0.2 # ２番目(一番目のDNSが使えないときに使う) nameserver 0.0.0.3 # ３番目(1番目、2番目のDNSが使えないときに使う) DNSの削除 をしたいときは/etc/resolv.confを開いて削除したいDNSがある行を削除、またはその行の先頭に#を追加してコメントにすることができます。\n# nameserver 0.0.0.0 # この行は無視される。 ","permalink":"http://localhost:41443/posts/change-dns/","summary":"\u003ch2 id=\"dnsを変更する\"\u003eDNSを変更する\u003c/h2\u003e\n\u003cp\u003eLinux では\u003ccode\u003e/etc/resolv.conf\u003c/code\u003eファイルを使ってDNS の設定をします。\u003cbr\u003e\n\u003ccode\u003e/etc/resolv.conf\u003c/code\u003eはテキストファイルで、下の書式の通りに記述することで設定します。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003enameserver DNSのipアドレス\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e例えば、DNSをGoogleの\u003ccode\u003e8.8.8.8\u003c/code\u003eに設定したいときはこう記述します。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003enameserver 8.8.8.8\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e簡単ですね。\u003c/p\u003e\n\u003cp\u003eまた、複数のDNSを設定することもできます。\u003cbr\u003e\n複数設定することで、普段使っているDNSが使えなくなっても2番目、3番目のDNSへの接続をしてくれます。\u003cbr\u003e\nファイルの上から順にそのDNSの優先順位が変わります。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003enameserver 0.0.0.1 # 一番優先順位の高いDNS(普段つかう)\nnameserver 0.0.0.2 # ２番目(一番目のDNSが使えないときに使う)\nnameserver 0.0.0.3 # ３番目(1番目、2番目のDNSが使えないときに使う)\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"dnsの削除\"\u003eDNSの削除\u003c/h2\u003e\n\u003cp\u003eをしたいときは\u003ccode\u003e/etc/resolv.conf\u003c/code\u003eを開いて削除したいDNSがある行を削除、またはその行の先頭に\u003ccode\u003e#\u003c/code\u003eを追加してコメントにすることができます。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# nameserver 0.0.0.0 # この行は無視される。  \n\u003c/code\u003e\u003c/pre\u003e","title":"LinuxでDNSを変更する"},{"content":"headコマンドでランダムな大きさのファイルを作ってみます。\n/dev/randomをheadしてその出力をリダイレクトします。\n$ head /dev/random \u0026gt; test ls -lでファイルサイズを見てみます。\n$ ls -l test -rw-r--r-- 1 user user 1920 Dec 21 14:58 test 大きさは本当にランダムになっているのでしょうか。\n以下のワンライナーを使ってファイルを5つ作ります。\n$ for i in {0..4}; do touch test$i \u0026amp;\u0026amp; head /dev/random \u0026gt; $_; done $ ls test0 test1 test2 test3 test4 ls -lでファイルサイズを見てみます。\n$ ls -l total 20 -rw-r--r-- 1 user user 2146 Dec 21 14:53 test0 -rw-r--r-- 1 user user 2647 Dec 21 14:53 test1 -rw-r--r-- 1 user user 3757 Dec 21 14:53 test2 -rw-r--r-- 1 user user 2578 Dec 21 14:53 test3 -rw-r--r-- 1 user user 2388 Dec 21 14:53 test4 おおよそ、2000~4000バイトくらいのファイルが作らるようですね。\n完全なランダムではありませんが、手頃なサイズのファイルを作ることができそうです。\n","permalink":"http://localhost:41443/posts/make-random-files/","summary":"\u003cp\u003e\u003ccode\u003ehead\u003c/code\u003eコマンドでランダムな大きさのファイルを作ってみます。\u003cbr\u003e\n\u003ccode\u003e/dev/random\u003c/code\u003eを\u003ccode\u003ehead\u003c/code\u003eしてその出力をリダイレクトします。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ head /dev/random \u0026gt; test\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003els -l\u003c/code\u003eでファイルサイズを見てみます。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ ls -l test\n\n-rw-r--r-- 1 user user 1920 Dec 21 14:58 test\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e大きさは本当にランダムになっているのでしょうか。\u003cbr\u003e\n以下のワンライナーを使ってファイルを5つ作ります。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ for i in {0..4}; do touch test$i \u0026amp;\u0026amp; head /dev/random \u0026gt; $_; done\n$ ls\ntest0  test1  test2  test3  test4\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003els -l\u003c/code\u003eでファイルサイズを見てみます。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ ls -l\ntotal 20\n-rw-r--r-- 1 user user 2146 Dec 21 14:53 test0\n-rw-r--r-- 1 user user 2647 Dec 21 14:53 test1\n-rw-r--r-- 1 user user 3757 Dec 21 14:53 test2\n-rw-r--r-- 1 user user 2578 Dec 21 14:53 test3\n-rw-r--r-- 1 user user 2388 Dec 21 14:53 test4\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eおおよそ、2000~4000バイトくらいのファイルが作らるようですね。\u003cbr\u003e\n完全なランダムではありませんが、手頃なサイズのファイルを作ることができそうです。\u003c/p\u003e","title":"headでランダムな大きさのファイルを作る(linux)"},{"content":"nologin(5)とは Linuxでは/etc/nologinというファイルを作成することで特権ユーザー以外のログインを禁止することができます。\nnologin(5)のmanページには次のようなことが書かれています。\nIf the file /etc/nologin exists and is readable, login(1) will allow access only to root. Other users will be shown the contents of this file and their logins will be re‐ fused. This provides a simple way of temporarily disabling all unprivileged logins.\n要約すると\n/etc/nologinが存在し読み取り可能な場合、login(1)はrootのみにアクセスを許可する。 他のユーザーは/etc/nologinの内容を見ることができ、ログインは拒否される。 つまり、/etc/nologinを作成し読み取り権限を付与すればroot以外のログインを禁止できるということです。\n実際にやってみた /etc/nologin を作って試してみました。\n以下、やってわかったことのまとめです。\n非特権ユーザーを入力するとパスワードプロンプトが表示されるまもなくログイン拒否される。 agettyなどで非特権ユーザーの自動ログインを設定しているとログインできてしまう。 /etc/nologinに記述した内容は下のように表示される。 login: user\t# ユーザー名入力後、エンター only root can access this system.\t# `/etc/nologin`の内容が出力される root以外のログインも許可したくなったら/etc/nologinを消すだけでOK まとめ ファイルの作成・削除だけで機能するので簡単で良いですね。\nちなみに、rootのパスワードを設定していない/忘れている 人は本当にログインできなくなってしまうので注意してください。(^_-)\n","permalink":"http://localhost:41443/posts/nologin/","summary":"\u003ch2 id=\"nologin5とは\"\u003enologin(5)とは\u003c/h2\u003e\n\u003cp\u003eLinuxでは\u003ccode\u003e/etc/nologin\u003c/code\u003eというファイルを作成することで特権ユーザー以外のログインを禁止することができます。\u003cbr\u003e\nnologin(5)のmanページには次のようなことが書かれています。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIf  the  file  /etc/nologin  exists and is readable, login(1) will allow access only to\nroot.  Other users will be shown the contents of this file and their logins will be re‐\nfused.  This provides a simple way of temporarily disabling all unprivileged logins.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e要約すると\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e/etc/nologin\u003c/code\u003eが存在し読み取り可能な場合、login(1)はrootのみにアクセスを許可する。\u003c/li\u003e\n\u003cli\u003e他のユーザーは\u003ccode\u003e/etc/nologin\u003c/code\u003eの内容を見ることができ、ログインは拒否される。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eつまり、\u003ccode\u003e/etc/nologin\u003c/code\u003eを作成し読み取り権限を付与すればroot以外のログインを禁止できるということです。\u003c/p\u003e\n\u003ch2 id=\"実際にやってみた\"\u003e実際にやってみた\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e/etc/nologin\u003c/code\u003e を作って試してみました。\u003cbr\u003e\n以下、やってわかったことのまとめです。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e非特権ユーザーを入力するとパスワードプロンプトが表示されるまもなくログイン拒否される。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eagetty\u003c/code\u003eなどで非特権ユーザーの自動ログインを設定しているとログインできてしまう。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e/etc/nologin\u003c/code\u003eに記述した内容は下のように表示される。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003elogin: user\t# ユーザー名入力後、エンター\nonly root can access this system.\t# `/etc/nologin`の内容が出力される\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003eroot以外のログインも許可したくなったら\u003ccode\u003e/etc/nologin\u003c/code\u003eを消すだけでOK\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"まとめ\"\u003eまとめ\u003c/h2\u003e\n\u003cp\u003eファイルの作成・削除だけで機能するので簡単で良いですね。\u003cbr\u003e\nちなみに、rootのパスワードを設定していない/忘れている 人は本当にログインできなくなってしまうので注意してください。(^_-)\u003c/p\u003e","title":"Linuxでroot以外のログインを禁止する"},{"content":"ls -l とは ls -l はlsコマンドでよく使われる形です。-lオプションをつけることでファイルやディレクトリの詳細な情報を出力することができます。\n以下は出力例です。\n$ ls -l total 20 -rw-r--r-- 1 user user 2755 Dec 20 15:08 test1 -rw-r--r-- 1 user user 3158 Dec 20 15:08 test2 -rw-r--r-- 1 user user 2997 Dec 20 15:08 test3 -rw-r--r-- 1 user user 1203 Dec 20 15:08 test4 -rw-r--r-- 1 user user 2129 Dec 20 15:08 test5 各行、左から順に以下ような情報が出力されています。\n一番左の-はファイルのタイプを示しています。(-はファイルを指す) パーミッション ハードリンクの数(すべて1となっている) 所有者名 (user) 所有グループ (user) ファイルのサイズ(バイト単位) 最終更新日時 ファイル名 しかし、ファイルサイズの表示がバイト単位だと見にくいですね。 そこで、\n-hオプションを使う ls -lhとすることで人間が読みやすい(ヒューマンリーダブルな)出力をしてくれます。\n具体的には以下のように出力することができます。\n$ ls -lh total 20K -rw-r--r-- 1 user user 2.7K Dec 20 15:08 test1 -rw-r--r-- 1 user user 3.1K Dec 20 15:08 test2 -rw-r--r-- 1 user user 3.0K Dec 20 15:08 test3 -rw-r--r-- 1 user user 1.2K Dec 20 15:08 test4 -rw-r--r-- 1 user user 2.1K Dec 20 15:08 test5 バイト単位だったファイルサイズがキロバイト単位になりました。\n単位が少なくなる分、だいぶ見やすくなります。\nファイルサイズを比較したいときなどに-hをつけると読みやすくて良いですよ。\n参考 man ","permalink":"http://localhost:41443/posts/ls-l/","summary":"\u003ch2 id=\"ls--l-とは\"\u003els -l とは\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003els -l\u003c/code\u003e は\u003ccode\u003els\u003c/code\u003eコマンドでよく使われる形です。\u003ccode\u003e-l\u003c/code\u003eオプションをつけることでファイルやディレクトリの詳細な情報を出力することができます。\u003cbr\u003e\n以下は出力例です。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ ls -l\ntotal 20\n-rw-r--r-- 1 user user 2755 Dec 20 15:08 test1\n-rw-r--r-- 1 user user 3158 Dec 20 15:08 test2\n-rw-r--r-- 1 user user 2997 Dec 20 15:08 test3\n-rw-r--r-- 1 user user 1203 Dec 20 15:08 test4\n-rw-r--r-- 1 user user 2129 Dec 20 15:08 test5\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e各行、左から順に以下ような情報が出力されています。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一番左の\u003ccode\u003e-\u003c/code\u003eはファイルのタイプを示しています。(\u003ccode\u003e-\u003c/code\u003eはファイルを指す)\u003c/li\u003e\n\u003cli\u003eパーミッション\u003c/li\u003e\n\u003cli\u003eハードリンクの数(すべて\u003ccode\u003e1\u003c/code\u003eとなっている)\u003c/li\u003e\n\u003cli\u003e所有者名 (user)\u003c/li\u003e\n\u003cli\u003e所有グループ (user)\u003c/li\u003e\n\u003cli\u003eファイルのサイズ(バイト単位)\u003c/li\u003e\n\u003cli\u003e最終更新日時\u003c/li\u003e\n\u003cli\u003eファイル名\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eしかし、ファイルサイズの表示がバイト単位だと見にくいですね。  そこで、\u003c/p\u003e\n\u003ch2 id=\"-hオプションを使う\"\u003e-hオプションを使う\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003els -lh\u003c/code\u003eとすることで人間が読みやすい(ヒューマンリーダブルな)出力をしてくれます。\u003cbr\u003e\n具体的には以下のように出力することができます。\u003c/p\u003e","title":"ls -l の出力を見やすくする"},{"content":"目次 tccとは 特徴 欠点 インストール方法 使用例 まとめ tccとは tcc(Tiny C Compiler) はその名の通りとても小さく、高速なcコンパイラです。\n2001年にファブリス・ベラールさんがIOCCCに発表したコードが原型になっています。その後、機能を拡張したものが現在のtccです。\n特徴 非常に小さく、高速。\n開発者のベラールさんによるとtccのコンパイル速度はgccよりも9倍高速であるそうです。\nオプションがgccに似ている。\ntccのオプションはgccに非常に似ているのでgccに慣れている方でも使いやすいです。\nJITコンパイラとしても使える。\nオプションをつけることでコンパイルと同時に実行することができます。 これについては後にも触れます。 欠点 tccはgccでするような(-Oオプションなどの)コンパイルの最適化ができないことが欠点というか、少し残念なポイントですね。\n性能よりもコンパイラの小ささに重点をおいているためです。\nとはいっても、現代のパソコンは高速なので最適化ができなくて困ることはほとんどないと思います。\nインストール方法 debian/debian派生osでのインストール方法です。\n$ sudo apt install tcc 公式リポジトリに配布されているのでaptで楽々インストールできます。\nまた、試していないので分かりませんがarchlinuxでも公式リポジトリに配布されているのでpacmanを使えばインストールできると思われます。\n使用例 gccとほとんど同じなので書く必要もないかもしれませんが。\nコンパイルしてa.outを作る。 $ tcc test.c アウトプットファイルを指定したいときは-oオプション $ tcc test.c -o test # test が作成される 厳格にエラーをチェックするようにするには $ tcc test.c -W コンパイル時に同時に実行する(JITコンパイル) $ tcc -run test.c # a.outは作成されない まとめ 今回はtccの紹介でした。\n他のコンパイラと比べて驚くほど早いのでぜひ一度試してみてください。\n参考: man Wikipedia ","permalink":"http://localhost:41443/posts/tcc/","summary":"\u003ch2 id=\"目次\"\u003e目次\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#tcc%E3%81%A8%E3%81%AF\"\u003etccとは\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E7%89%B9%E5%BE%B4\"\u003e特徴\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E6%AC%A0%E7%82%B9\"\u003e欠点\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%96%B9%E6%B3%95\"\u003eインストール方法\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E4%BD%BF%E7%94%A8%E4%BE%8B\"\u003e使用例\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003eまとめ\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"tccとは\"\u003etccとは\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"tcc-runs-on-linux\" loading=\"lazy\" src=\"/images/tcc-on-linux.png\"\u003e\u003c/p\u003e\n\u003cp\u003e \ntcc(Tiny C Compiler) はその名の通りとても小さく、高速なcコンパイラです。\u003c/p\u003e\n\u003cp\u003e2001年にファブリス・ベラールさんが\u003ca href=\"https://ja.m.wikipedia.org/wiki/IOCCC\" title=\"wikipedia:IOCCC\"\u003eIOCCC\u003c/a\u003eに発表したコードが原型になっています。その後、機能を拡張したものが現在のtccです。\u003c/p\u003e\n\u003ch2 id=\"特徴\"\u003e特徴\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e非常に小さく、高速。\u003cbr\u003e\n開発者のベラールさんによるとtccのコンパイル速度はgccよりも9倍高速であるそうです。\u003cbr\u003e\n \u003c/li\u003e\n\u003cli\u003eオプションがgccに似ている。\u003cbr\u003e\ntccのオプションはgccに非常に似ているのでgccに慣れている方でも使いやすいです。\u003cbr\u003e\n \u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ja.m.wikipedia.org/wiki/%E5%AE%9F%E8%A1%8C%E6%99%82%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9\"\u003eJITコンパイラ\u003c/a\u003eとしても使える。\u003cbr\u003e\nオプションをつけることでコンパイルと同時に実行することができます。  これについては後にも触れます。\n \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"欠点\"\u003e欠点\u003c/h2\u003e\n\u003cp\u003etccはgccでするような(-Oオプションなどの)コンパイルの最適化ができないことが欠点というか、少し残念なポイントですね。\u003c/p\u003e\n\u003cp\u003e性能よりもコンパイラの小ささに重点をおいているためです。\u003c/p\u003e\n\u003cp\u003eとはいっても、現代のパソコンは高速なので最適化ができなくて困ることはほとんどないと思います。\u003c/p\u003e\n\u003ch2 id=\"インストール方法\"\u003eインストール方法\u003c/h2\u003e\n\u003cp\u003edebian/debian派生osでのインストール方法です。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ sudo apt install tcc\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e公式リポジトリに配布されているので\u003ccode\u003eapt\u003c/code\u003eで楽々インストールできます。\u003c/p\u003e\n\u003cp\u003eまた、試していないので分かりませんがarchlinuxでも公式リポジトリに配布されているので\u003ccode\u003epacman\u003c/code\u003eを使えばインストールできると思われます。\u003c/p\u003e\n\u003ch2 id=\"使用例\"\u003e使用例\u003c/h2\u003e\n\u003cp\u003egccとほとんど同じなので書く必要もないかもしれませんが。\u003cbr\u003e\n \u003c/p\u003e\n\u003ch4 id=\"コンパイルしてaoutを作る\"\u003eコンパイルして\u003ccode\u003ea.out\u003c/code\u003eを作る。\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ tcc test.c\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"アウトプットファイルを指定したいときは-oオプション\"\u003eアウトプットファイルを指定したいときは\u003ccode\u003e-o\u003c/code\u003eオプション\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ tcc test.c -o test # test が作成される\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"厳格にエラーをチェックするようにするには\"\u003e厳格にエラーをチェックするようにするには\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ tcc test.c -W\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"コンパイル時に同時に実行するjitコンパイル\"\u003eコンパイル時に同時に実行する(JITコンパイル)\u003c/h4\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ tcc -run test.c # a.outは作成されない\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"まとめ\"\u003eまとめ\u003c/h2\u003e\n\u003cp\u003e今回はtccの紹介でした。\u003c/p\u003e\n\u003cp\u003e他のコンパイラと比べて驚くほど早いのでぜひ一度試してみてください。\u003c/p\u003e\n\u003ch3 id=\"参考\"\u003e参考:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eman\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ja.m.wikipedia.org/wiki/Tiny_C_Compiler\"\u003eWikipedia\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"超高速なコンパイラ「tcc」"},{"content":"はじめに mkdirしたディレクトリに即座に移動したいとき、どうしてますか?\n今回はshellの特殊変数と演算子を使って素早くcdする方法を紹介します。\n環境 Debian 12 bash 5 本題 では、早速本題のコマンドを見ていきましょう。\n以下がコマンド例です。\n$ mkdir test.d;cd $_ test.dをmkdirし、enterもせず、記号;を挟んですぐにcdしていますね。\n後に解説しますが、;を使うことで改行することなく、更に$_を使うことで作ったディレクトリの名前を入力することもなく実行できるんです。\n解説 左から順に、コマンドごとに解説していきます。\nmkdir test.d これはそのままの意味です。test.dというディレクトリを作ります。 ; ;はコマンドを立て続けに実行できる記号です。直前のコマンドの実行結果を無視して次のコマンドを実行します。 上の場合、mkdirの実行結果に関わらず、cdを実行します。 cd $_ bashでは$_は特殊変数として扱われ、直前のコマンドの最後の引数が入ります。上の例では、$_はtest.dに展開されます。 所感 bashには色々な特殊変数や演算子があります。それらを駆使して効率の良い操作をしていきたいですね。\n参考:\nman ","permalink":"http://localhost:41443/posts/mkdir-cd/","summary":"\u003ch2 id=\"はじめに\"\u003eはじめに\u003c/h2\u003e\n\u003cp\u003emkdirしたディレクトリに即座に移動したいとき、どうしてますか?\u003cbr\u003e\n今回はshellの特殊変数と演算子を使って素早くcdする方法を紹介します。\u003c/p\u003e\n\u003ch2 id=\"環境\"\u003e環境\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eDebian 12\u003c/li\u003e\n\u003cli\u003ebash 5\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"本題\"\u003e本題\u003c/h2\u003e\n\u003cp\u003eでは、早速本題のコマンドを見ていきましょう。\u003cbr\u003e\n以下がコマンド例です。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ mkdir test.d;cd $_\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003etest.d\u003c/code\u003eを\u003ccode\u003emkdir\u003c/code\u003eし、\u003ccode\u003eenter\u003c/code\u003eもせず、記号\u003ccode\u003e;\u003c/code\u003eを挟んですぐに\u003ccode\u003ecd\u003c/code\u003eしていますね。\u003cbr\u003e\n後に解説しますが、\u003ccode\u003e;\u003c/code\u003eを使うことで改行することなく、更に\u003ccode\u003e$_\u003c/code\u003eを使うことで作ったディレクトリの名前を入力することもなく実行できるんです。\u003c/p\u003e\n\u003ch2 id=\"解説\"\u003e解説\u003c/h2\u003e\n\u003cp\u003e左から順に、コマンドごとに解説していきます。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003emkdir test.d\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003eこれはそのままの意味です。\u003ccode\u003etest.d\u003c/code\u003eというディレクトリを作ります。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e;\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e;\u003c/code\u003eはコマンドを立て続けに実行できる記号です。直前のコマンドの実行結果を無視して次のコマンドを実行します。\n上の場合、mkdirの実行結果に関わらず、cdを実行します。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecd $_\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003ebashでは\u003ccode\u003e$_\u003c/code\u003eは特殊変数として扱われ、直前のコマンドの最後の引数が入ります。上の例では、\u003ccode\u003e$_\u003c/code\u003eは\u003ccode\u003etest.d\u003c/code\u003eに展開されます。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"所感\"\u003e所感\u003c/h2\u003e\n\u003cp\u003ebashには色々な特殊変数や演算子があります。それらを駆使して効率の良い操作をしていきたいですね。\u003c/p\u003e\n\u003cp\u003e参考:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eman\u003c/li\u003e\n\u003c/ul\u003e","title":"mkdirで作ったディレクトリに、素早くcdする"},{"content":"はじめに どれもよく使うファイル形式ですが、展開方法をよく忘れてしまうのでこの機会にまとめました。\n展開方法のみ書きましたので詳しい使い方はmanをみてください。\n目次 tar xz zip gzip bzip2 tar $ tar -xf archive.tar # -f でファイル名 archive.tar を指定し、 -x で展開をする xz $ xz -d archive.xz # -d はdecompress(展開の意味)の頭文字 または $ unxz archive.xz zip $ unzip archive.zip gzip $ gzip -d archive.gzip または $ gunzip archive.gzip bzip2 $ bzip2 -d archive.bz2 ","permalink":"http://localhost:41443/categories/linux/decompress-commands/","summary":"\u003ch2 id=\"はじめに\"\u003eはじめに\u003c/h2\u003e\n\u003cp\u003eどれもよく使うファイル形式ですが、展開方法をよく忘れてしまうのでこの機会にまとめました。\u003cbr\u003e\n展開方法のみ書きましたので詳しい使い方はmanをみてください。\u003c/p\u003e\n\u003ch2 id=\"目次\"\u003e目次\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#tar\"\u003etar\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#xz\"\u003exz\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#zip\"\u003ezip\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#gzip\"\u003egzip\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#bzip2\"\u003ebzip2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"tar\"\u003etar\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ tar -xf archive.tar # -f でファイル名 archive.tar を指定し、 -x で展開をする\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"xz\"\u003exz\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ xz -d archive.xz  # -d はdecompress(展開の意味)の頭文字\nまたは\n$ unxz archive.xz\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"zip\"\u003ezip\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ unzip archive.zip\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"gzip\"\u003egzip\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ gzip -d archive.gzip\nまたは\n$ gunzip archive.gzip\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"bzip2\"\u003ebzip2\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ bzip2 -d archive.bz2\n\u003c/code\u003e\u003c/pre\u003e","title":"Linuxコマンドで tar, xz, zip, gzip, bzip2 形式のファイルの展開する方法"},{"content":"はじめに どれもよく使うファイル形式ですが、展開方法をよく忘れてしまうのでこの機会にまとめました。\n展開方法のみ書きましたので詳しい使い方はmanをみてください。\n目次 tar xz zip gzip bzip2 tar $ tar -xf archive.tar # -f でファイル名 archive.tar を指定し、 -x で展開をする xz $ xz -d archive.xz # -d はdecompress(展開の意味)の頭文字 または $ unxz archive.xz zip $ unzip archive.zip gzip $ gzip -d archive.gzip または $ gunzip archive.gzip bzip2 $ bzip2 -d archive.bz2 ","permalink":"http://localhost:41443/posts/decompress-commands/","summary":"\u003ch2 id=\"はじめに\"\u003eはじめに\u003c/h2\u003e\n\u003cp\u003eどれもよく使うファイル形式ですが、展開方法をよく忘れてしまうのでこの機会にまとめました。\u003cbr\u003e\n展開方法のみ書きましたので詳しい使い方はmanをみてください。\u003c/p\u003e\n\u003ch2 id=\"目次\"\u003e目次\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#tar\"\u003etar\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#xz\"\u003exz\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#zip\"\u003ezip\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#gzip\"\u003egzip\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#bzip2\"\u003ebzip2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"tar\"\u003etar\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ tar -xf archive.tar # -f でファイル名 archive.tar を指定し、 -x で展開をする\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"xz\"\u003exz\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ xz -d archive.xz  # -d はdecompress(展開の意味)の頭文字\nまたは\n$ unxz archive.xz\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"zip\"\u003ezip\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ unzip archive.zip\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"gzip\"\u003egzip\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ gzip -d archive.gzip\nまたは\n$ gunzip archive.gzip\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"bzip2\"\u003ebzip2\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ bzip2 -d archive.bz2\n\u003c/code\u003e\u003c/pre\u003e","title":"Linuxコマンドで tar, xz, zip, gzip, bzip2 形式のファイルの展開する方法"},{"content":"こんにちは。\nNitterはまだ使えるのか? そもそもNitterとは何なのか?\nまとめました。\nNitterとは? Nitter は以下のような特徴を備えたオープンソースかつフリーなTwitterビューアーです。\njavascriptを使わなくても動作し、広告がなく軽量 Twitterのトラッキングを防ぐことができる RSSフィードに対応している テーマがある Twitterの非公式APIを使っている 2019年から開発が始まったNitterですが、Twitterの仕様変更などの理由で公式のプロジェクトは2024/2月頃に終了しています。\nNitterは今でも使えるのか 公式の開発は終了しましたが、Nitterには複数のインスタンスがあり、現在でもアクティブです。\nしかし、そのほとんどは動作不能で、動作可能なインスタンスはごく一部です。\nその中で現在最も安定に動作すると思われるインスタンスは nitter.poast.org です。 非常にレスポンスが良く、エラーを吐くこともほとんどありません。一つ注意点としては、ブラウザの認証のために javascript と クッキー が必要となることです。\nちなみに、Nitter Instance Healthというサイトがあります。\nNitterインスタンスの動作状況をトラッキングしてくれるサイトです。\nNitterを使用しているときににエラーが多発する場合は、このサイトを見ることで動作状況が 確認できるので便利です。\nまた、これを見ると上述の通りほとんどのサーバーが不安定、もしくは動作不能な状態になっていることがわかります。\nまとめ NitterはオープンソースかつフリーなTwitterビューアー。公式のプロジェクトは終了している。 いくつかの非公式インスタンスはまだ使うことができる。 参照サイト\nhttps://github.com/zedeus/nitter https://ja.m.wikipedia.org/wiki/Nitter ","permalink":"http://localhost:41443/posts/nitter/","summary":"\u003cp\u003eこんにちは。\u003cbr\u003e\nNitterはまだ使えるのか? そもそもNitterとは何なのか?\u003cbr\u003e\nまとめました。\u003c/p\u003e","title":"「Nitter」は今でも使えるの？2024/12月"},{"content":"今回はLinuxで特定サイトへのアクセスを禁止する方法 を紹介していきます。\nLinuxには/etc/hostsというファイルがあります。/etc/hostsは名前解決の設定をできるファイルで、\n以下のような文法で記述します\nIPアドレス ドメイン名\nIPアドレスに0.0.0.0を設定すれば、そのドメインへのアクセスを禁止することができます。\n例えば、以下のように記述するとwww.example.com にアクセスしようとしてもアドレスが 0.0.0.0 に変換されてアクセスできなくなります。\n0.0.0.0 www.example.com\nまた、#以降の文はコメントとして認識されます:\n# 0.0.0.0 this.is.comment\n注意点 /etc/hostsにもともと記述されていた内容は消さないようにすること この方法は特定のファイルへのアクセスを禁止することはできないこと。例えば、以下のようにはできません: 0.0.0.0 www.example.com/file ublock origin などを使えばいいと思う人もいるかもしれませんが、 この方法ではブラウザ以外のソフト(ターミナルとか)でも、反映されるので便利です。\n","permalink":"http://localhost:41443/posts/hosts/","summary":"\u003cp\u003e今回はLinuxで特定サイトへのアクセスを禁止する方法\nを紹介していきます。\u003cbr\u003e\nLinuxには\u003ccode\u003e/etc/hosts\u003c/code\u003eというファイルがあります。\u003ccode\u003e/etc/hosts\u003c/code\u003eは名前解決の設定をできるファイルで、\u003c/p\u003e","title":"Linuxで特定のサイトへのアクセスを禁止する方法"},{"content":"このサイトはアフェリエイト広告(Amazonアソシエイトを含む)を掲載しています。\n","permalink":"http://localhost:41443/policy/","summary":"\u003cp\u003eこのサイトはアフェリエイト広告(Amazonアソシエイトを含む)を掲載しています。\u003c/p\u003e","title":""}]