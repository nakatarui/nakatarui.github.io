<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>BI BO RO KU room</title>
    <link>https://nakatarui.github.io/</link>
    <description>Recent content on BI BO RO KU room</description>
    <generator>Hugo -- 0.139.4</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 16 Dec 2024 21:35:37 +0900</lastBuildDate>
    <atom:link href="https://nakatarui.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>超高速なコンパイラ「tcc」</title>
      <link>https://nakatarui.github.io/posts/tcc/</link>
      <pubDate>Mon, 16 Dec 2024 21:35:37 +0900</pubDate>
      <guid>https://nakatarui.github.io/posts/tcc/</guid>
      <description>&lt;h2 id=&#34;目次&#34;&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tcc%E3%81%A8%E3%81%AF&#34;&gt;tccとは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E7%89%B9%E5%BE%B4&#34;&gt;特徴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%AC%A0%E7%82%B9&#34;&gt;欠点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%96%B9%E6%B3%95&#34;&gt;インストール方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%BD%BF%E7%94%A8%E4%BE%8B&#34;&gt;使用例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E3%81%BE%E3%81%A8%E3%82%81&#34;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tccとは&#34;&gt;tccとは&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&#34;tcc-runs-on-linux&#34; loading=&#34;lazy&#34; src=&#34;https://nakatarui.github.io/images/tcc-on-linux.png&#34;&gt;&lt;/p&gt;
&lt;p&gt; 
tcc(Tiny C Compiler) はその名の通りとても小さく、高速なcコンパイラです。&lt;/p&gt;
&lt;p&gt;2001年にファブリス・ベラールさんが&lt;a href=&#34;https://ja.m.wikipedia.org/wiki/IOCCC&#34; title=&#34;wikipedia:IOCCC&#34;&gt;IOCCC&lt;/a&gt;に発表したコードが原型になっています。その後、機能を拡張したものが現在のtccです。&lt;/p&gt;
&lt;h2 id=&#34;特徴&#34;&gt;特徴&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;非常に小さく、高速。&lt;br&gt;
開発者のベラールさんによるとtccのコンパイル速度はgccよりも9倍高速であるそうです。&lt;br&gt;
 &lt;/li&gt;
&lt;li&gt;オプションがgccに似ている。&lt;br&gt;
tccのオプションはgccに非常に似ているのでgccに慣れている方でも使いやすいです。&lt;br&gt;
 &lt;/li&gt;
&lt;li&gt;独自の機能がある。&lt;br&gt;
tccにはコードのコンパイルと同時に実行する機能があります。これについては後にも触れます。
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;欠点&#34;&gt;欠点&lt;/h2&gt;
&lt;p&gt;tccはgccでするような(-Oオプションなどの)コンパイルの最適化ができないことが欠点というか、少し残念なポイントですね。&lt;/p&gt;
&lt;p&gt;性能よりもコンパイラの小ささに重点をおいているためです。&lt;/p&gt;
&lt;p&gt;とはいっても、現代のパソコンは高速なので最適化ができなくて困ることはほとんどないと思います。&lt;/p&gt;
&lt;h2 id=&#34;インストール方法&#34;&gt;インストール方法&lt;/h2&gt;
&lt;p&gt;debian/debian派生osでのインストール方法です。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo apt install tcc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;公式リポジトリに配布されているので&lt;code&gt;apt&lt;/code&gt;で楽々インストールできます。&lt;/p&gt;
&lt;p&gt;また、試していないので分かりませんがarchlinuxでも公式リポジトリに配布されているので&lt;code&gt;pacman&lt;/code&gt;を使えばインストールできると思われます。&lt;/p&gt;
&lt;h2 id=&#34;使用例&#34;&gt;使用例&lt;/h2&gt;
&lt;p&gt;gccとほとんど同じなので書く必要もないかもしれませんが。&lt;br&gt;
 &lt;/p&gt;
&lt;h4 id=&#34;コンパイルしてaoutを作る&#34;&gt;コンパイルして&lt;code&gt;a.out&lt;/code&gt;を作る。&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ tcc test.c
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;アウトプットファイルを指定したいときは-oオプション&#34;&gt;アウトプットファイルを指定したいときは&lt;code&gt;-o&lt;/code&gt;オプション&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ tcc test.c -o test
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;厳格にエラーをチェックするようにするには&#34;&gt;厳格にエラーをチェックするようにするには&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ tcc test.c -W
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;コンパイル時に同時に実行するtcc独自の機能&#34;&gt;コンパイル時に同時に実行する(tcc独自の機能)&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ tcc -run test.c # a.outは作成されない
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;今回はtccの紹介でした。&lt;/p&gt;
&lt;p&gt;他のコンパイラと比べて驚くほど早いのでぜひ一度試してみてください。&lt;/p&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;man&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.m.wikipedia.org/wiki/Tiny_C_Compiler&#34;&gt;https://ja.m.wikipedia.org/wiki/Tiny_C_Compiler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>mkdirで作ったディレクトリに、素早くcdする</title>
      <link>https://nakatarui.github.io/posts/mkdir-cd/</link>
      <pubDate>Sat, 14 Dec 2024 21:49:10 +0900</pubDate>
      <guid>https://nakatarui.github.io/posts/mkdir-cd/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;mkdirしたディレクトリに即座に移動したいとき、どうしてますか?&lt;br&gt;
今回はshellの特殊変数と演算子を使って素早くcdする方法を紹介します。&lt;/p&gt;
&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Debian 12&lt;/li&gt;
&lt;li&gt;bash 5&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;本題&#34;&gt;本題&lt;/h2&gt;
&lt;p&gt;では、早速本題のコマンドを見ていきましょう。&lt;br&gt;
以下がコマンド例です。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ mkdir test.d;cd $_
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;test.d&lt;/code&gt;を&lt;code&gt;mkdir&lt;/code&gt;し、&lt;code&gt;enter&lt;/code&gt;もせず、記号&lt;code&gt;;&lt;/code&gt;を挟んですぐに&lt;code&gt;cd&lt;/code&gt;していますね。&lt;br&gt;
後に解説しますが、&lt;code&gt;;&lt;/code&gt;を使うことで改行することなく、更に&lt;code&gt;$_&lt;/code&gt;を使うことで作ったディレクトリの名前を入力することもなく実行できるんです。&lt;/p&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;左から順に、コマンドごとに解説していきます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mkdir test.d&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;これはそのままの意味です。&lt;code&gt;test.d&lt;/code&gt;というディレクトリを作ります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;;&lt;/code&gt;はコマンドを立て続けに実行できる記号です。直前のコマンドの実行結果を無視して次のコマンドを実行します。
上の場合、mkdirの実行結果に関わらず、cdを実行します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd $_&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;bashでは&lt;code&gt;$_&lt;/code&gt;は特殊変数として扱われ、直前のコマンドの最後の引数が入ります。上の例では、&lt;code&gt;$_&lt;/code&gt;は&lt;code&gt;test.d&lt;/code&gt;に展開されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;所感&#34;&gt;所感&lt;/h2&gt;
&lt;p&gt;bashには色々な特殊変数や演算子があります。それらを駆使して効率の良い操作をしていきたいですね。&lt;/p&gt;
&lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;man&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Linuxコマンドで tar, xz, zip, gzip, bzip2 形式のファイルの展開する方法</title>
      <link>https://nakatarui.github.io/categories/linux/decompress-commands/</link>
      <pubDate>Wed, 11 Dec 2024 20:51:15 +0900</pubDate>
      <guid>https://nakatarui.github.io/categories/linux/decompress-commands/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;どれもよく使うファイル形式ですが、展開方法をよく忘れてしまうのでこの機会にまとめました。&lt;br&gt;
展開方法のみ書きましたので詳しい使い方はmanをみてください。&lt;/p&gt;
&lt;h2 id=&#34;目次&#34;&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tar&#34;&gt;tar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#xz&#34;&gt;xz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#zip&#34;&gt;zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gzip&#34;&gt;gzip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bzip2&#34;&gt;bzip2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tar&#34;&gt;tar&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ tar -xf archive.tar # -f でファイル名 archive.tar を指定し、 -x で展開をする
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;xz&#34;&gt;xz&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ xz -d archive.xz  # -d はdecompress(展開の意味)の頭文字
または
$ unxz archive.xz
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;zip&#34;&gt;zip&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ unzip archive.zip
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;gzip&#34;&gt;gzip&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ gzip -d archive.gzip
または
$ gunzip archive.gzip
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;bzip2&#34;&gt;bzip2&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ bzip2 -d archive.bz2
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Linuxコマンドで tar, xz, zip, gzip, bzip2 形式のファイルの展開する方法</title>
      <link>https://nakatarui.github.io/posts/decompress-commands/</link>
      <pubDate>Wed, 11 Dec 2024 20:51:15 +0900</pubDate>
      <guid>https://nakatarui.github.io/posts/decompress-commands/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;どれもよく使うファイル形式ですが、展開方法をよく忘れてしまうのでこの機会にまとめました。&lt;br&gt;
展開方法のみ書きましたので詳しい使い方はmanをみてください。&lt;/p&gt;
&lt;h2 id=&#34;目次&#34;&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tar&#34;&gt;tar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#xz&#34;&gt;xz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#zip&#34;&gt;zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gzip&#34;&gt;gzip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bzip2&#34;&gt;bzip2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tar&#34;&gt;tar&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ tar -xf archive.tar # -f でファイル名 archive.tar を指定し、 -x で展開をする
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;xz&#34;&gt;xz&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ xz -d archive.xz  # -d はdecompress(展開の意味)の頭文字
または
$ unxz archive.xz
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;zip&#34;&gt;zip&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ unzip archive.zip
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;gzip&#34;&gt;gzip&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ gzip -d archive.gzip
または
$ gunzip archive.gzip
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;bzip2&#34;&gt;bzip2&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ bzip2 -d archive.bz2
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>「Nitter」は今でも使えるの？2024/12月</title>
      <link>https://nakatarui.github.io/posts/nitter/</link>
      <pubDate>Mon, 09 Dec 2024 09:11:22 +0900</pubDate>
      <guid>https://nakatarui.github.io/posts/nitter/</guid>
      <description>&lt;p&gt;こんにちは。&lt;br&gt;
Nitterはまだ使えるのか? そもそもNitterとは何なのか?&lt;br&gt;
まとめました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linuxで特定のサイトへのアクセスを禁止する方法</title>
      <link>https://nakatarui.github.io/posts/hosts/</link>
      <pubDate>Sun, 08 Dec 2024 12:15:51 +0900</pubDate>
      <guid>https://nakatarui.github.io/posts/hosts/</guid>
      <description>&lt;p&gt;今回はLinuxで特定サイトへのアクセスを禁止する方法
を紹介していきます。&lt;br&gt;
Linuxには&lt;code&gt;/etc/hosts&lt;/code&gt;というファイルがあります。&lt;code&gt;/etc/hosts&lt;/code&gt;は名前解決の設定をできるファイルで、&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
